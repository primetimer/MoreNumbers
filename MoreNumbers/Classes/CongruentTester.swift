//
//  PiTester.swift
//  Numbers
//
//  Created by Stephan Jancar on 29.12.17.
//  Copyright Â© 2017 Stephan Jancar. All rights reserved.
//

import Foundation
import BigInt
import PrimeFactors

public class CongruentTester : NumTester {
    
    public init() {}
    
    let seq = [5, 6, 7, 13, 14, 15, 20, 21, 22, 23, 24, 28, 29, 30, 31, 34, 37, 38, 39, 41, 45, 46, 47, 52, 53, 54, 55, 56, 60, 61, 62, 63, 65, 69, 70, 71, 77, 78, 79, 80, 84, 85, 86, 87, 88, 92, 93, 94, 95, 96, 101, 102, 103, 109, 110, 111, 112, 116, 117, 118, 119, 120, 124, 125, 126]
    
    func removeSquare(n: BigUInt, cancel : CalcCancelProt?) -> (r: BigUInt,sq: BigUInt)? {
        let fs = FactorCache.shared.Factor(p: n, cancel: cancel)
        if cancel?.IsCancelled() ?? false { return nil }
        let pf = FactorsWithPot(pf: fs)
        var sq = BigUInt(1)
        for f in pf.factors{
            var e = f.e
            while e >= 2 {
                sq = sq * f.f * f.f
                e = e-2
            }
        }
        
        return (r: n / sq, sq: sq)

        
    }
    public func triangle(n: BigUInt,cancel : CalcCancelProt?) -> (a: (BigUInt,BigUInt), b: (BigUInt,BigUInt))? {
        if !n.isInt64() { return nil }
        if n < 5 { return nil }
        guard let (r,sq) = removeSquare(n: n,cancel: cancel) else { return nil }
        
        
        let tri = TriangleRational.shared
        guard let pq = tri.getTriangle(n: Int(r)) else { return nil }
        
        let p = (pq.a.0 * sq.squareRoot(),pq.a.1)
        let q = (pq.b.0 * sq.squareRoot(),pq.b.1)
        return (p,q)
        
        
    }
    
    public func isSpecial(n: BigUInt, cancel: CalcCancelProt?) -> Bool? {
        if !n.isInt64() { return nil }
        
        guard let (r,_) = removeSquare(n:n, cancel:cancel) else { return nil }
        
        if r.isPrime() {
            if r % 8 == 5 {
                return true
            }
            if r % 8 == 7 {
                return true
            }
        }
        
       if r % 2 == 0 {
            let p = r/2
            if p.isPrime() {
                if p % 8 == 3 {
                    return true
                }
                if p % 8 == 7 {
                    return true
                }
            }
        }
        
        return isCongruent(n: UInt64(r), cancel: cancel)
    }
    
    public func property() -> String {
        "congruent"
    }
    
    public func getLatex(n: BigUInt) -> String? {
        let cancel = TimeOut()
        let special = isSpecial(n: n,cancel: cancel) ?? false
        if !special { return nil }
        var latex = "\\exists (a,b,c) \\in \\mathbb{Q} : \(String(n)) = A(\\triangle(a,b,c)) = \\frac{1}{2}ab, a^2+b^2 = c^2"
        //return latex
        if let (p,q) = triangle(n:n, cancel: cancel) {
            latex = latex + "\\\\" + "\(String(n)) = \\frac{1}{2}\\frac{\(String(p.0))}{\(String(p.1))} \\frac{\(String(q.0))}{\(String(q.1))}"
        }
        return latex
    }

    func solven(n : UInt64, cond : Int, cancel: CalcCancelProt? ) -> Int? {
        var order = 0
        let n2 = Int(n.squareRoot())
        
        for x in -n2 ... n2 {
            for y in -n2 ... n2 {
                for z in -n2 ... n2 {
                    if cancel?.IsCancelled() ?? false { return nil }
                    var test = 0
                    switch cond {
                    case 1:
                        test = x*x+2*y*y+8*z*z
                    case 2:
                        test = x*x+2*y*y+32*z*z
                    case 3:
                        test = 2*x*x+8*y*y+16*z*z
                    case 4:
                        test = 2*x*x+8*y*y+64*z*z
                    default:
                        assert(false)
                    }
                    
                    if test == Int(n) {
                        order = order + 1
                    }
                }
            }
        }
        return order
    }

    func isOdd(_ n:Int) -> Bool {
        if (n % 2 != 0) { return true }
        return false
    }
   
    func isCongruent(n : UInt64,cancel: CalcCancelProt?) -> Bool? {
         
        if isOdd(Int(n)) {
            guard let n1 = solven(n: n, cond: 1, cancel:cancel) else { return nil }
            guard let n2 = solven(n: n, cond: 2, cancel:cancel) else { return nil }

            if n1 == 2*n2 {
                return true
            }
            return false
        }
        else {
            guard let n3 = solven(n: n, cond: 3,cancel:cancel) else { return nil }
            guard let n4 = solven(n: n, cond: 4,cancel:cancel) else { return nil }
        
            if n3 == 2*n4 {
                return true
            }
        }
        return false
    }
}


precedencegroup ExponentiativePrecedence {
    associativity: right
    higherThan: MultiplicationPrecedence
}

infix operator ^: ExponentiativePrecedence
public func ^ (radix: BigUInt, power: Int) -> BigUInt {
    return radix.power(power)
}
//public func ^ (radix: Int, power: Int) -> BigUInt {
//    return BigUInt(radix).power(power)
//}

class TriangleRational {
    
    public static let shared : TriangleRational = TriangleRational()
    
    private init() {}
    public func getTriangle(n : Int) -> (a: (BigUInt,BigUInt), b: (BigUInt,BigUInt))? {
        if n < 5 { return nil }
        if n > maxn { return nil }
        for pq in arr {
            if pq.n > n { return nil }
            if pq.n == n {
                let a = 2*pq.p*pq.q
                let b = pq.p*pq.p - pq.q*pq.q
                let Area = a*b/2
                let nenner = (Area / BigUInt(n)).squareRoot()
                
                return (a: (a,nenner), b: (b,nenner))
            }
        }
        return nil
    }
    
    public let maxn = 674
    private let arr : [(n:Int, p: BigUInt, q:BigUInt)] = [
    
    (5,5*1^2,2^2) ,
    (6,2*1^2,1^2),
    (7,4^2,3^2),
    (13,13*5^2,6^2),
    (14,2*2^2,1^2),
    (15,2^2,1^2),
    (21,2^2,3*1^2),
    (22,2*5^2,7^2),
    (23,156^2,133^2),
    (29,29*13^2,70^2),
    (30,3*1^2,2*1^2),
    (31,40^2,9^2),
    (34,3^2,2*2^2),
    (37,37*145^2,42^2),
    (38,2*25^2,17^2),
    (39,13*1^2,3*2^2),
    (41,5^2,4^2),
    (46,2*6^2,7^2),
    (47,3816^2,1513^2),
    (53,53*5945^2,34034^2),
    (55,5*5^2,11*2^2),
    (61,61*445^2,3198^2),
    (62,2*140^2,151^2),
    (65,3^2,2^2),
    (69,3*8^2,13^2),
    (70,7*1^2,2*1^2),
    (71,60^2,11^2),
    (77,11*16^2,53^2),
    (78,26*1^2,1^2),
    (79,13000^2,12921^2),
    (85,85*1^2,6^2),
    (86,2*13^2,7^2),
    (87,134^2,13^2),
    (93,38^2,3*5^2),
    (94,2*84^2,23^2),
    (95,5*17^2,19*2^2),
    (101,101*21041^2,63050^2),
    (102,2*5^2,1^2),
    (103,93704884^2,86901837^2),
    (109,109*5^2,42^2),
    (110,10*1^2,1^2),
    (111,37*1^2,3*2^2),
    (118,2*18925^2,4393^2),
    (119,12^2,5^2),
    (127,17501923504^2,17467450497^2),
    (133,506^2,19*87^2),
    (134,2*1021^2,119^2),
    (137,137*5^2,56^2),
    (138,6*2^2,1^2),
    (141,3*4^2,1^2),
    (142,2*49590^2,12809^2),
    (143,318^2,43^2),
    (145,29*1^2,5*2^2),
    (149,149*25^2,238^2),
    (151,340^2,189^2),
    (154,3^2,2*1^2),
    (157,157*53156661805^2,407598125202^2),
    (158,2*620^2,761^2),
    (159,182^2,107^2),
    (161,4^2,7*1^2),
    (165,4^2,11*1^2),
    (166,2*9941^2,9799^2),
    (167,339444^2,58717^2),
    (173,173*3728226965^2,48661701478^2),
    (174,3*3^2,2*1^2),
    (181,181*4121^2,34950^2),
    (182,7*7^2,2*3^2),
    (183,61*541^2,3*390^2),
    (190,10*1^2,3^2),
    (191,636182040^2,620449561^2),
    (194,97*1^2,2*6^2),
    (197,197*3179345^2,10192154^2),
    (199,3732820^2,523149^2),
    (205,5*3^2,2^2),
    (206,2*1394^2,1103^2),
    (210,5*1^2,2*1^2),
    (210,6*1^2,1^2),
    (213,3*1600^2,851^2),
    (214,2*313^2,287^2),
    (215,62^2,19^2),
    (219,73*1^2,3*4^2),
    (221,13*1^2,2^2),
    (222,74*13^2,59^2),
    (223,7137389056^2,3792733167^2),
    (226,9^2,2*4^2),
    (229,229*61793^2,87030^2),
    (230,23*7^2,2*19^2),
    (231,7*1^2,2^2),
    (237,43454^2,3*5915^2),
    (238,2*30^2,41^2),
    (239,120^2,119^2),
    (246,2*17^2,23^2),
    (247,5998^2,5877^2),
    (253,354^2,11*91^2),
    (254,2*272^2,161^2),
    (255,4^2,1^2),
    (257,153^2,104^2),
    (262,2*7345^2,9553^2),
    (263,49143127346631084^2,46867792486220437^2),
    (265,7^2,2^2),
    (269,269*85656402325^2,82710580922^2),
    (271,300940360^2,101904681^2),
    (277,277*232579772276105^2,1032363194300802^2),
    (278,2*701185^2,990817^2),
    (285,19*2^2,7^2),
    (286,11*1^2,2*1^2),
    (287,137904^2,137903^2),
    (291,7^2,3*4^2),
    (293,293*231520447985^2,3842474897278^2),
    (295,5*433^2,59*62^2),
    (299,6^2,13*1^2),
    (301,43*8^2,27^2),
    (302,2*2167791890^2,3004234751^2),
    (303,202046^2,166403^2),
    (309,3458^2,3*799^2),
    (310,10*2^2,3^2),
    (311,436723577940^2,353087218429^2),
    (313,13^2,12^2),
    (317,317*2951368765^2,16840660634^2),
        (318,1083,242),
    (319,50^2,49^2),

    (323,17*5^2,19*4^2),
    (326,2*33661^2,679^2),
    (327,109*7969^2,3*47950^2),
    (330,6*1^2,5*1^2),
    (334,2*1279626^2,1061887^2),
    (335,2798^2,2629^2),
    (341,118^2,11*15^2),
    (349,349*7453^2,113730^2),
    (353,17^2,8^2),
    (357,21*1^2,2^2),
    (358,2*21866725^2,20489063^2),
    (359,57470100^2,57469741^2),
    (365,365*14893^2,94874^2),
    (366,122*1^2,11^2),
    (367,BigUInt("16382168821648506431464")^2,BigUInt("496953629608513608777")^2),
    (371,53*1^2,7*2^2),
    (373,373*2603564129117970265^2,16377382078444972158^2),
    (374,2*29^2,1^2),
    (381,398^2,3*221^2),
    (382,2*129060^2,88679^2),
    (383,20091144^2,17430983^2),
    (386,11^2,2*6^2),
    (389,389*14699193245425^2,72369303587042^2),
    (390,2*2^2,5*1^2),
    (391,572^2,555^2),
    (395,5*4^2,1^2),
    (397,397*109045^2,2069034^2),
    (398,2*655850^2,806831^2),
    (399,8^2,57*1^2),
    (406,58*8^2,3^2),
    (407,37*11225^2,11*20586^2),
    (410,41*1^2,10*2^2),
    (413,64114^2,59*6213^2),
    (415,29698^2,15671^2),
    (421,421*32786945^2,189819882^2),
    (422,2*565^2,217^2),
    (426,6*4^2,5^2),
    (429,3*2^2,1^2),
    (430,43*9^2,2*41^2),
    (431,439631880^2,56365561^2),
    (434,2*4^2,31*1^2),
    (437,8914^2,19*1247^2),
    (438,7^2,6*2^2),
    (439,266438380^2,207471339^2),
    (442,11^2,26*2^2),
    (445,89*1^2,5*4^2),
    (446,2*37655576^2,19427153^2),
    (447,22442^2,21481^2),
    (453,1307114^2,3*722785^2),
    (454,2*708089^2,925711^2),
    (455,8^2,1^2),
    (457,253^2,204^2),
    (461,461*331709140421^2,6025359571150^2),
    (462,14*1^2,11*1^2),
    (463,1078250296^2,376638153^2),
    (465,4^2,15*1^2),
    (469,67*148^2,1101^2),
    (470,47*1^2,2*1^2),
    (471,157*949^2,3*1962^2),
    (478,2*7613312866500^2,1278366247319^2),
    (479,46320^2,22849^2),
    (485,485*6409^2,81314^2),
    (487,31922317361596^2,20227123841253^2),
    (493,493*348125^2,3026946^2),
    (494,19*11^2,2*27^2),
    (501,3*8932^2,4163^2),
    (502,2*13172945^2,5749553^2),
    (503,BigUInt("126022097765194972888404")^2,BigUInt("124468507893835378881997")^2),
    (505,101*1^2,5*2^2),
    (509,509*13^2,170^2),
    (510,2*4^2,17*1^2),
    (511,18952^2,2145^2),
    (514,257*1^2,2*4^2),
    (517,6^2,11*1^2),
    (518,74*4^2,29^2),
    (519,570986^2,64223^2),
    (526,2*3774^2,137^2),
    (527,24^2,7^2),
    (533,533*6025^2,137522^2),
    (534,2*157^2,217^2),
    (535,418^2,311^2),
    (541,541*82652759501^2,1629675045390^2),
    (542,2*8337517165460^2,6072862516759^2),
    (543,181*849929197^2,3*3004968950^2),
    (546,7*1^2,6*1^2),
    (551,350^2,179^2),
    (557,557*1746479765^2,40206424678^2),
    (559,13*317^2,43*174^2),
    (561,17*1^2,4^2),
    (565,565*41^2,558^2),
    (566,2*3119461^2,508681^2),
    (573,3*155482680^2,222747577^2),
    (574,2*12^2,1^2),
    (581,554^2,83*57^2),
    (582,194*1^2,13^2),
    (583,53*8825^2,11*19178^2),
    (589,19*944^2,2265^2),
    (590,10*41^2,67^2),
    (591,1406^2,181^2),
    (597,4509125978^2,3*2061246655^2),
    (598,26*186^2,727^2),
    (599,BigUInt("1743235759090264843329900")^2,BigUInt("1298070998128102765757269")^2),
    (602,5^2,2*3^2),
    (606,3*27^2,2*13^2),
    (607,BigUInt("11193477616854092718151692958821016")^2,BigUInt("5301570241310268303909957034492887")^2),
    (609,7*2^2,1^2),
    (613,613*14799287186305^2,46559016084714^2),
    (614,2*59953357^2,57198937^2),
    (615,22^2,19^2),
    (622,2*90^2,31^2),
    (623,3040742304^2,958046297^2),
    (629,629*1^2,10^2),
    (631,84388339390660^2,84042085995171^2),
    (638,11*2019^2,2*4375^2),
    (645,5*5^2,2^2),
    (646,2*3^2,1^2),
    (647,BigUInt("1149852430778431376586487272927719076")^2,BigUInt("763331759345415695713922022788822893")^2),
    (651,7*2^2,3*1^2),
    (653,653*BigUInt("4956148647851982833406804183365")^2,BigUInt("119088454066039826980851213749474")^2),
    (654,218*13^2,121^2),
    (655,5*7085^2,131*178^2),
    (658,2*8^2,47*1^2),
    (661,661*52573871914105^2,1337443404825678^2),
    (663,13*5^2,51*2^2),
    (669,14^2,3*3^2),
    (670,67*3^2,2*11^2),
    (671,6^2,5^2),
    (674,337*1^2,2*12^2)
    ]
    
    
    
}
