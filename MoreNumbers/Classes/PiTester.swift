//
//  PiTester.swift
//  Numbers
//
//  Created by Stephan Jancar on 29.12.17.
//  Copyright © 2017 Stephan Jancar. All rights reserved.
//

import Foundation
import BigInt
import PrimeFactors

public enum MathConstantType : Int {
    case pi = 0
    case e
    case gamma
    case mill
    case bruns
    case root2
    case ln2
    case pisquare
    case phi
    case crt2
    case zeta3
    case conwaylambda
    case khinchin
    case silver
    case plastic
    case gauss
    case chaitin
    case copelanderdos
    case champernowne
    case ramanujan
    case feigenbaumdelta
    case feigenbaumalpha
    case gelfond
    case viswanath
    case carefree
    
    static let allValues = [pi,e,gamma,mill,bruns,root2,ln2,pisquare,phi,crt2,zeta3,conwaylambda,khinchin,silver,plastic,gauss,chaitin,copelanderdos,champernowne,ramanujan,feigenbaumdelta,feigenbaumalpha,gelfond,viswanath,carefree]
    static let name = ["π","e","γ","θ","B2","√2","ln(2)","π^2","φ",",∛2","ζ(3)","λ","K","δ","ρ","G","Ω","C","C10","K","δ","α","e^π","v","K1"]
    static let latex = ["\\pi","e","\\gamma","\\theta","B_{2}","\\sqrt{2}","ln(2)","\\pi^2","\\phi","\\sqrt[3]{2}","\\zeta (3)","\\lambda","K_{0}","\\delta_{S}","\\rho","G","\\Omega","C_{CE}","C_{10}","K_{RL}","\\delta","\\alpha","e^{\\pi}","e^{\\gamma_{f}}","K_{1}"]
    
    func asString() -> String {
        return MathConstant.shared.dict[self] ?? ""
    }
    func withPot() -> Int{
        switch self {
        case .pi, .e, .pisquare,.root2,.mill,.phi,.crt2,.bruns,.zeta3,.conwaylambda,.khinchin,.silver,.plastic,.feigenbaumalpha,.feigenbaumdelta:
            return 0
        case .ln2, .gamma,.gauss,.copelanderdos,.champernowne,.ramanujan,.carefree:
            return -1
        case .chaitin:
            return -3
        case .gelfond:
            return 1
        case .viswanath:
            return 0
        
        }
    }
    func Latex() -> String {
        return MathConstantType.latex[self.rawValue]
    }
    func Symbol() -> String {
        return MathConstantType.name[self.rawValue]
    }
    
    func asDouble() -> Double {
        switch self {
        case .pi:
            return Double.pi
        case .e:
            return exp(1.0)
        case .root2:
            return sqrt(2.0)
        case .ln2:
            return log(2.0)
        case .gamma:
            return Double.gamma
        case .mill:
            return Double.mill
        case .pisquare:
            return Double.pi * Double.pi
        case .phi:
            return Double.phi
        case .crt2:
            return pow(2.0,1.0/3.0)
        case .bruns:
            return Double(1.902160583104)
        case .zeta3:
            return Double(1.20205690315959428539973816)
        case .conwaylambda:
            return Double (1.3035772690342963912570991)
            //        case .graham:
        //            return Double(0.783591464262726575401950934681)
        case .khinchin:
            return Double(2.685452001065306445309714835481795693)
        case .silver:
            return 1.0 + sqrt(2.0)
        case .plastic:
            let r2 = sqrt(69.0)
            let rho = pow((9.0+r2)/18.0,1/3) + pow((9.0-r2)/18.0,1/3)
            return rho
        case .gauss:
            return Double(0.83462684167407318628142)
        case .chaitin:
            return Double(0.00787499699781238)
        case .copelanderdos:
            return Double(0.235711131719232931)
        case .champernowne:
            return Double(0.123456789101112131)
        case .ramanujan:
            return 0.7642236535892206
        case .feigenbaumdelta:
            return 4.6692016091029906
        case .feigenbaumalpha:
            return 2.502907875095892822283902873218
        case .gelfond:
            return exp(Double.pi)
        case .viswanath:
            return 1.1319882487943
        case .carefree:
            return 0.4282495056770
        }
    }
}

public class MathConstant {
    public var dict : [MathConstantType:String] = [:]
    public static var shared = MathConstant()
    public init() {
//        #if false //Copeland Erdös
//        var ans = "0.2"
//        for n in 1 ... 1000 {
//            let nn = 2*n+1
//            if BigUInt(nn).isPrime() {
//                ans = ans + String(nn)
//            }
//        }
//        let c = ans.count
//        print (ans)
//        #endif
//        #if false
//        var ans = "0." //Champernowne
//        for n in 1 ... 1000 {
//            if ans.count > 1000 { break }
//            ans = ans + String(n)
//        }
//        let c = ans.count
//        print (ans)
//        #endif
//
        for type in MathConstantType.allValues {
            #if false
            let val = Value(type: type)
            let s = val.asString(10, maxlen: 2000, fix: 2000)
            print(s)
            #else
            let s = ValueStr(type: type)
            #endif
            
            let s0 = s.replacingOccurrences(of: "0.", with: "")
            let s1 = s0.replacingOccurrences(of: ".", with: "")
            var s2  = s1
            while s2.first == "0" {
                s2.removeFirst()
            }
            dict[type] = s2
        }
    }
    
    public func ValueStr(type: MathConstantType) -> String {
        switch type {
        case .pi:
            return "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989"
        case .e:
            return "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403555707162268447162"
        case .phi:
            return "1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066478091588460749988712400765217057517978834166256249407589069704000281210427621771117778053153171410117046665991466979873176135600670874807101317952368942752194843530567830022878569978297783478458782289110976250030269615617002504643382437764861028383126833037242926752631165339247316711121158818638513316203840052221657912866752946549068113171599343235973494985090409476213222981017261070596116456299098162905552085247903"
        case .gamma:
            return "0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498070824809605040144865428362241739976449235362535003337429373377376739427925952582470949160087352039481656708532331517766115286211995015079847937450857057400299213547861466940296043254215190587755352673313992540129674205137541395491116851028079842348775872050384310939973613725530608893312676001724795378367592713515772261027349291394079843010341777177808815495706610750101619166334015227893586796549725203621287922655595366962817638879272680132431010476505963703947394957638906572967929601009015125195950922243501409349871228247949747195646976318506676129063811051824197444867836380861749455169892792301877391072945781554316005002182844096053772434203285478367015177394398700302370339518328690001558193988042707411542227819716523011073565833967348717650491941812300040654693142999297779569303100503086303418569803231083691640025892970890985486825777364288253954925873629596133298574739302373438847070370284412920166417850248733379080562754998434590761643167103146710722370021810745044418664759134803669025532458625442225345181387912434573501361297782278288"
        case .root2:
            return "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372352885092648612494977154218334204285686060146824720771435854874155657069677653720226485447015858801620758474922657226002085584466521458398893944370926591800311388246468157082630100594858704003186480342194897278290641045072636881313739855256117322040245091227700226941127573627280495738108967504018369868368450725799364729060762996941380475654823728997180326802474420629269124859052181004459842150591120249441341728531478105803"
        case .silver:
            return "2.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372352885092648612494977154218334204285686060146824720771435854874155657069677653720226485447015858801620758474922657226002085584466521458398893944370926591800311388246468157082630100594858704003186480342194897278290641045072636881313739855256117322040245091227700226941127573627280495738108967504018369868368450725799364729060762996941380475654823728997180326802474420629269124859052181004459842150591120249441341728531478105803"
            
        case .crt2:
            return "1.25992104989487316476721060727822835057025146470150798008197511215529967651395948372939656243625509415431025603561566525939902404061373722845911030426935524540618836483047903168522761507693415353166369798302487844871482466277857369536790460552074433365145037391271066206203236309086428893962143305688894899017487665581868800315137956383134320393321172713118078361257985552005289196540504609084187891109179418597396618998593301320618463497465650394289931490063233088609592664183223525084812244905262611683020583520508344325328615763664446254751911764044210018537850216466360484868393713657300257696751408359031493058176603300046449992140284093053318956215075489991898879715188122663110068642390221809491213828320852345850452853822226984704427687019000322043165568548503526869279619941712521355641215401870043827490340097276368597968982484264686533126349132557598856774931340401887402732330678359237029957136064669522137059423777725507226997209927289271747777915306094915143435847776709740057773102479554907977093981951558083300830650448696188313967646292412901260614862333753713658245086539820481509861083609417336059577843468459863780457772527172198064299620"
        case .bruns:
            return "1.902160583104"
        case .ln2:
            return "0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481020570685733685520235758130557032670751635075959043238263654720704089640510532271970375726344921950858035417124714912314546214182798108239226369440201888631329886376255827209736821913480211527584313264185952408099401099040526332150515212569979487817201690474612331651057798250602209992709097350320257437865347934491062772207694119122054453281616287390061029415962943215403823064062644107608757693467406600566914309126855805546743040289480247870622790040954808428771547439829159110400686553119248381171266661890476492124201098599460220142614344256295489851167439165440359961124958288488500211521913695607953028561972198430593993901647212737846749050770048200186455486922332339046475600515373471424911389885531971586120445224632000800595434176974152489296172196198300611604186124962373598541916997025234596103753245855588943782459252314629556481543024047602324797237066447126895940354777290224281396216166257999378721976659590803379110382349503299852111852615343364421600807107792913887704055352988265841526149011707979842940880388566060421737560370592197673181410650543481773904864763532086846666273"
        case .pisquare:
            return "6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234135964296173026564613294187689219101164463450718816256962234900568205403877042211119289245897909860763928857621951331866892256951296467573566330542403818291297133846920697220908653296426787214520498282547449174013212631176349763041841925658508183430728735785180720022661061097640933042768293903883023218866114540731519183906184372234763865223586210237096148924759925499134703771505449782455876366023898259667346724881313286172042789892790449474381404359721887405541078434352586353504769349636935338810264001136254290527121655571542685515579218347274357442936881802449906860293099170742101584559378517847084039912224258043921728068836319627259549542619921037414422699999996745956099902119463465632192637190048918910693816605285044616506689370070523862376342020006275677505773175066416762841234355338294607196506980857510937462319125727764707575187503915563715561064342453613226003855753222391818432840397876190514402130971726557731872306763655936460603904070603705937991547245198827782499443550566958263031149714484908301391901659066233723455711778150196763509274929878638510120801855403342278019697648025716723"
        case .mill:
            return "1.30637788386308069046861449260260571291678458515671364436805375996643405376682659882150140370119739570729696093810308688223886144781635348688713392214619435345787110033188140509357535583193264801721383236152235906221860161085667905721519797609516199295279707992563172152784123713076584911245631751842633105652153513186684155079079372385923352208421842040532051768902602579344300869529063620569896872621227499787666438515766191438772844982077590564825560915004123788524793626088046688154064374425340131073611440941376503643793012676721171310302652283866154666880487476095144107907540698417260347310774677574064007810935083421437442654204085311165490420993090855747058348793757769523336364858305492927387281493416741250273266926840468154062676311322374882380011804120628601384191443885715160918938894478991212554338474935909274442208280226020332302710637502228813106477844481700372333640604211874260838332822176968781235304962300880267221110401606508880971834777831402249082184410637749400023282419270071233303228854128584088916313729295257781669730936517951304701393525757057288415991731506781288275420005462290126288405806701552761743270631625705587885293887371663631869096785158480771725887503591755610651534304682508915720529218979451918656896107079679454091800398939472486242136261078017853543289004499330170496366824138991559390863407971519521054913832178750248935369436911007271030372613750972234285323116168628543944188065497"
        case .zeta3:
            //return "1.202056903159594285399738161511449990764986292"
            
            return "1.20205690315959428539973816151144999076498629234049888179227155534183820578631309018645587360933525815493902129267719635293025148023562729223189504235099765549710236098910130402551126846637825903855732756290159779841586518567105233889870420808454064157898408705286825141217192266761637166504627943237277558629119970639543829392728449964423307735015032638443385833148783580030198240782927555606559736039039911560157567181314242376073706558940843159984432414004545116738229404139394736976624199465023676"
        //return "1.3063778838630806904686144926026057129167845851567136443680537599664340537668265988215014037011973957"
        case .conwaylambda:
            return "1.30357726903429639125709911215255189073070250465940487575486139062855088785246155712681576686442522555347139304709490268396284989355155434737582485669108897777021657600666661361819575814997141621174776792313242993257201430462771329538801692527531631121241602789744556311221192891765945442844221050348398443048435036597886163656869612293300521796781212742072742833841858538978046297536211133257131559611428416463649306506851827429249157508076047165548732899031406796262775210982301850098048676804171127036928277045556992541047253255296002396741615176130075769952394147092096272977965252838128952923998421466469700636280871859847376432425963753778614871491804177943882564549629612672676317034139989238683800174993391638325504197387433764046442309634163773429999640279534778123150369381113619691931011055122243280653348729498516353501800086189800442695696203908949639604105938945262628974848057200498952058940831545115274641841512518024730200193796777836621406609110475293228758836385887695696199420516499767643762266466055465244027494584094408262251386608655407221"
            //        case .graham:
        //            return String("02425950695064738395657479136519351798334535362521430035401260267716226721604198106522631693551887803881448314065252616878509555264605107117200099709291249544378887496062882911725063001303622934916080254594614945788714278323508292421020918258967535604308699380168924988926809951016905591995119502788717830837018340236474548882222161573228010132974509273445945043433009010969280253527518332898844615089404248265018193851562535796399618993967905496638003222348723967018485186439059104575627262464195387.0".reversed())
        case .khinchin:
            let ans = "2.68545200106530644530971483548179569382038229399446295305115234555721885953715200280114117493184769799515346590528809008289767771641096305179 253348325966838185231542133211949962603932852204481940961806866416642893084778806203607370535010336726335772890499042707027234517026252370235458106863 185010323746558037750264425248528694682341899491573066189872"
                + "07994137235500057935736698933950879021244642075289"
                + "74145914769301844905060179349938522547040420337798"
                + "56398310157090222339100002207725096513324604444391"
                + "91691460859682348212832462282927101269069741823484"
                + "77675457348986254203392662351862086778136650969658"
                + "31469952718374480540121953666660496482698908275481"
                + "15254721177330319675947383719393578106059230401890"
                + "71134962467370684122179468107406089182766956671171"
                + "66837405904739368809534504899970471763904513432323"
                + "77151032196515038246988883248709353994696082647818"
                + "12056634946712578436664579740977848366204977774868"
                + "27656970871631929385128993141995186116737926546205"
                + "63505951385713761697126872299805327673278710513763"
            return ans
        case .plastic:
            let ans = "1.324717957244746025960908854478097340734404056901733364534015050302827"
                + "851245547594054699347981787280329910920994742207425108902639045897795594"
                + "314757096723471754166839038867418751736931584253549908246622354533727350"
                + "458987990956815062774550980248621301216989415752457454862507562652461036"
                + "893890483993226995207497596282886855690815070451369610985335257728158603"
                + "344114192782827376529603299358467423102848324169523900610854333821850839"
                + "810180895735387047393134396731376764602103165276889396393532594399248310"
                + "310958395377519426028877409271862033892820161525553218270947061305676123"
                + "988920463730657196297771688630876153324800111768073116684532277431566289"
                + "960726638357221036347070983837159802233710213098246849086312969366344392"
                + "445007154150429000819030670589845339053468872874066195775626167061764288"
                + "919391230837918311716229603886147635880730631509748376758245927028901319"
                + "509551556012280038595761540178421517618744215955860996699247114780120823"
                + "733654139737119129264057962484832322634420095923073636101515091300390033"
                + "271919208565844628509610264398371271771717824611423169203976027359949364"
                + "954292607919491594329821816418706248560047732461261659984147551482089917"
                + "930712844248130942812408460830082838667706758742522887916328625839728056"
                + "827354153847658244748041671982803486070177611808580498003768346860678691"
                + "722870783723999716249784210273659565836527860335179965801554558537572939"
            return ans
        case .gauss:
            let ans = "0.83462684167407318628142973279904680899399301349034700244982737010368199270952641186969116035127532412906785035241201008672478900763475039265906052674271256032068599897375152146157410719066771476231124461664405187138396784514028386920045138133589075855302049848005280446931643580936897895689068917412073729109406655817518702547740107467837971652635675333190654545251769296103056005406849466254896421861429472075214865365816107620214603752034877535962085677116829220032535910958989989306983319969697733588373910495908596740291824695687469164857451910672757407861143814276105801843203454261549375461009570891175210684201358033124753921938139023239090952343408874222691843888629942222592633521639478011022099075214906939643083603825771794119487059673964272655835084832169397133695059511623882815154747022864207775775371060188804723248904618525301889597025689818013878804895735929346540394633132158338785532854522493441641765173202349682703374720941476496496460623737943995705190866698254812596246577649588"
            return ans
        case .chaitin:
            let ans = "0.0078749969978123844"
            return ans
        case .copelanderdos:
            return "0.2357111317192329313741434753596167717379838997101103107109113127131137139149151157163167173179181191193197199211223227229233239241251257263269271277281283293307311313317331337347349353359367373379383389397401409419421431433439443449457461463467479487491499503509521523541547557563569571577587593599601607613617619631641643647653659661673677683691701709719727733739743751757761769773787797809811821823827829839853857859863877881883887907911919929937941947953967971977983991997100910131019102110311033103910491051106110631069108710911093109711031109111711231129115111531163117111811187119312011213121712231229123112371249125912771279128312891291129713011303130713191321132713611367137313811399140914231427142914331439144714511453145914711481148314871489149314991511152315311543154915531559156715711579158315971601160716091613161916211627163716571663166716691693169716991709172117231733174117471753175917771783178717891801181118231831184718611867187118731877187918891901190719131931193319491951197319791987199319971999"
        case .champernowne:
            return "0.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369"
        case .ramanujan:
            return "0.76422365358922066299069873125009232811679054139340951472168667374961464165873285883840150501313123372193726912079259263418742064678084323063315434629380531605171169636177508819961243824994277683469051623513921871962056905329564467041917634977065956990571293866028938589982961051662960890991779298360729736972006403169851286365173473921065768550978681981674707359066921830288751501689624646710918081710618090086517493799082420450570666204898612757713333895484325083035682950407721597524121430942470953115765559404064229125772724071563491218723272555640889999512705135849728552347645942418505999635800934732669411548076911671455813028066898593167493626295259560163215843892463887558347193993864581698751045893518777945872755226448709943505595943671299977780669880564555921300690852242867691102264527531455816088116296997029876937094388422089495290791626363527791432286156863284215944899347183748322904155863814951281527102068249218645827978145098870379211809629840943604891233924014852514327407923660178532707078"
        case .feigenbaumdelta:
            return "4.6692016091029906718532038204662016172581855774757686327456513430041343302113147371386897440239480138171659848551898151344086271420279325223124429888908908599449354632367134115324817142199474556443658237932020095610583305754586176522220703854106467494942849814533917262005687556659523398756038256372256480040951071283890611844702775854285419801113440175002428585382498335715522052236087250291678860362674527213399057131606875345083433934446103706309452019115876972432273589838903794946257251289097948986768334611626889116563123474460575179539122045562472807095202198199094558581946136877445617396074115614074243754435499204869180982648652368438702799649017397793425134723808737136211601860128186102056381818354097598477964173900328936171432159878240789776614391395764037760537119096932066998361984288981837003229412030210655743295550388845849737034727532121925706958414074661841981961006129640161487712944415901405467941800198133253378592493365883070459999938375411726563553016862529032210862320550634510679399"
        case .feigenbaumalpha:
            return "2.5029078750958928222839028732182157863812713767271499773361920567792354631795902067032996497464338341295952318699958547239421823777854451792728633149933725781121635948795037447812609973805986712397117373289276654044010306698313834600094139322364490657889951220584317250787337746308785342428535198858750004235824691874082042817009017148230518216216194131998560661293827426497098440844701008054549677936760888126446406885181552709324007542506497157047047541993283178364533256241537869395712509706638797949265462313767459189098131167524342211101309131278371609511583412308415037164997020224681219644081216686527458043026245782561067150138521821644953254334987348741335279581535101658360545576351327650181078119483694595748502373982354526256327794753972699020128915166457939420198920248803394051699686551494477396533876979741232354061781989611249409599035312899773361184984737794610842883329383390395090089140863515256268033814146692799133107433497051435452013446434264752001621384610729922641994332772918977769053"
        case .gelfond:
            return "23.140692632779269005729086367948547380266106242600211993445046409524342350690452783516971997067549219675952704801087773144428044414693835844717445879609849365327965863669242230268991013741764684401410395183868477243068059588162449844491430966778413671631963414784038216511287637731470347353833162821294047891936224820221006032065443362736557271823744989618858059591684872645479013397834026595101499643792422968160799565381423536206957600770590460899883002254304871211791300849327379580729427301931042601691939325853203428968661895283290521711157185185506802254197204566370865568386830544799278170407497768540367556534957218867882563994384718224585889428535247260568210271076018491534518468064887386774439630514005169440540665265430968869063937315359837311042174433023967896690035041181486053390287203759918586886897487324321721585596074334676426167856117353336421265631915665454892289692245773889570905361803836197510326567943624088359906422347128465334373148717065178946374273412694796804321041476668230286429"
        case .viswanath:
            return "1.1319882487943"
        case .carefree:
            return "0.42824950567709444021876570758182354612129851335593614403190137953   2123052161083044105348514524680685548075734471826650670760298782532202902060406006887295715546753121470856083723205533531615357717745704825428225554297283696738275243948054619580397572948970571255564006624326244822264521782047909356846676624987867336263801297580183603609587285887870271540518570070230066980070361894924470744759244358330723470660351433812586320875486366180958514143724627466515445943595374388523973047948241330515549288601237668132387315374086632831991324601013451241535695308717935409174778207281333728529496818696236287800390835452964120277840366725631718659274937815728785493316964445382432248740067189326836281378269545698518578961240522465858492456205847622932709534303214266618061630301093444739030449710014425660475145093883188574980713768582527634012357670899419615382184833852656242709172820693357405550716893691334855583096871173560177526671757519238439288428663514376486101692284238897841668021682172217568317"
        }
    }
}

public class MathConstantTester : NumTester {
    
    public init() {}
    
    public func FindConst(n : BigUInt) -> (type : MathConstantType, digits: Int)? {
        let nstr = String(n)
        if nstr.count < 3 { return nil }
        //Decimal Digits
        for c in MathConstantType.allValues {
            let digits = CheckConstDigits(n: n, type: c)
            if digits > 2 { return (c,digits)}
        }
        return nil
    }
    
    public func CheckConstDigits(n: BigUInt,type: MathConstantType) -> Int {
        let nstr = String(n)
        let cstr = type.asString()
        if testStr(nstr: nstr, cstr: cstr) {
            return (nstr.count)
        }
        return 0
    }
    
    public func FindRational(n: BigUInt,type : MathConstantType) -> (n: BigInt, d: BigInt, index: Int)? {
        guard let (oeis_n_nr,oeis_d_nr,_) = type.OEISRational() else { return nil }
        if !OEIS.shared.ContainsNumber(oeisnr: oeis_n_nr, n: n) { return nil }
        guard let seqn = OEIS.shared.GetSequence(oeisnr: oeis_n_nr) else { return nil }
        guard let seqd = OEIS.shared.GetSequence(oeisnr: oeis_d_nr) else { return nil }
        
        for i in 0..<seqn.count {
            if seqn[i] == n {
                return (seqn[i],seqd[i],i)
            }
        }
        
        assert(false)
        return nil
    }
    
    public func FindRational(n: BigUInt) -> (type : MathConstantType, n: BigInt, d: BigInt, index: Int)? {
        for type in MathConstantType.allValues {
            if let (num,denom,i) = FindRational(n: n, type: type) {
                return (type,num,denom,i)
            }
            
        }
        return nil
    }
    
    private func testStr(nstr: String, cstr : String) -> Bool
    {
        let nc = Array(nstr)
        let cc = Array(cstr)
        if nc.count<=1 { return false }
        for i in 0..<nc.count {
            if i >= cc.count-1 { return false }
            if nc[i] != cc[i] { return false }
        }
        return true
    }
    
    public func isSpecial(n: BigUInt,cancel : CalcCancelProt?) -> Bool? {
        if n < BigUInt(5) { return false }
        if FindConst(n: n) != nil {
            return true
        }
        if FindRational(n: n) != nil {
            return true
        }
        return false
    }
    
    public func getConstant(n: BigUInt) -> String? {
        guard let (type,_) = FindConst(n: n) else { return nil }
        return type.asString()
    }
    
//    func getDesc(n: BigUInt) -> String? {
//        let desc = WikiLinks.shared.getLink(tester: self, n: n)
//        return desc
//    }
    
    private func moreLatex(type: MathConstantType) -> String {
        switch type {
        case .pi:
            var ans = "\\text{connection between }\\pi \\text{ and prime numbers }p_k : \\\\"
            ans = ans + "\\frac{4}{\\pi} = \\prod_{k=2}^{\\infty} (1 - \\frac{\\chi(p_k)}{p_k}), "
            ans = ans + "\\chi(p_k) = \\begin{cases} \\\\" +
                "+1 & p_k \\equiv 1 mod 4 \\\\" +
                "-1 & p_k \\equiv 3 mod 4 \\\\" +
            "\\end{cases}"
            return ans
        case .pisquare:
            return "\\frac{6}{\\pi^2} = \\frac{1}{\\zeta(2)} = \\prod_{p \\in \\mathbb{P}} (1-\\frac{1}{p^2})"
        case .ln2:
            return "\\prod_{p \\leq x}(1-\\frac{1}{p}) \\sim \\frac{e^{-\\gamma}}{ln x}"
        case .bruns:
            return "B_2 = \\sum_{p,p+2 \\in \\mathbb{P}} (\\frac{1}{p} + \\frac{1}{p+2})"
        case .gamma:
            return "\\gamma = \\lim\\limits_{n \\rightarrow \\infty}{\\sum_{k=1}^{n} \\frac{1}{k} - ln{ }n}"
        case .zeta3:
            return "\\zeta (3) = \\sum_{n=1}^{\\infty} \\frac{1}{n^3}"
        case .khinchin:
            return "K_{0} = \\prod_{r=1}^{\\infty} (1 + \\frac{1}{r(r+2)})^{log_{2}r}"
        case .chaitin:
            return "\\Omega = \\sum_{p\\text{ halts}} 2^{-\\mid p \\mid}"
        case .copelanderdos:
            return "C_{CE} = \\sum_{n=1}^{\\infty} p_{n} \\cdot 10^{(-n + \\sum_{k=1}^{n} \\lfloor log_{10} p_k \\rfloor) }, p_k \\in \\mathbb{P} "
        case .champernowne:
            let nenner = "10^{n+\\sum_{k=1}^{n-1} \\lfloor log_{10} (k+1) \\rfloor}"
            return "C_{10} = \\sum_{n=1}^{\\infty} \\frac{n}{ \(nenner)  }"
            
        case .e:
            let ans = "e = \\sum_{k=0}^{\\infty} \\frac{1}{k!}"
            return ans
        case .mill:
            let ans = "\\theta = \\min \\{ A \\in \\mathbb{R} : \\forall n \\lfloor A^{3^{n}} \\rfloor \\in \\mathbb{P} \\}"
            return ans
            
        case .root2:
            let ans = "(\\sqrt{2})^{2} = 2, \\forall p,q \\in \\mathbb{N} : \\frac{p}{q} \\neq \\sqrt{2}"
            return ans
        case .phi:
            let ans = "\\phi = \\frac{1+\\sqrt{5}}{2}"
            return ans
        case .crt2:
            let ans = "(\\sqrt[3]{2})^{2} = 2, \\forall p,q \\in \\mathbb{N} : \\frac{p}{q} \\neq \\sqrt[3]{2}"
            return ans
        case .conwaylambda:
            let coeff =   [-6, 3, -6, 12, -4, 7, -7, 1, 0, 5, -2, -4, -12, 2, 7, 12, -7, -10, -4, 3, 9, -7, 0, -8, 14, -3, 9, 2, -3, -10, -2, -6, 1, 10, -3, 1, 7, -7, 7, -12, -5, 8, 6, 10, -8, -8, -7, -3, 9, 1, 6, 6, -2, -3, -10, -2, 3, 5, 2, -1, -1, -1, -1, -1, 1, 2, 2, -1, -2, -1, 0, 1]
            var ans = "0 = -6 + 3 \\lambda"
            for n in 2...71 {
                if n > 0 && n % 10 == 0 { ans = ans + "\\\\" }
                let an = coeff[n]
                if an == 0 { continue }
                if n > 0 && an > 0 { ans = ans + "+" }
                switch an {
                case 1:
                    break
                case -1:
                    ans = ans + "-"
                default:
                    ans = ans + String(an)
                }
                ans = ans + "\\lambda^{\(String(n))}"
            }
            return ans
            //        case .graham:
        //            return ""
        case .silver:
            let v = MathConstantType.latex[type.rawValue]
            var ans = v + "= 1 + \\sqrt{2} \\\\"
            ans = ans + "\\frac{2a+b}{a} = \\frac{a}{b} \\rightarrow \\frac{a}{b} = \(v)"
            return ans
        case .plastic:
            let v = MathConstantType.latex[type.rawValue]
            let crt3plus =  "\\sqrt[3]{ \\frac{9+\\sqrt{69}}{18}  }"
            let crt3minus =  "\\sqrt[3]{ \\frac{9-\\sqrt{69}}{18}  }"
            var ans = v + " = " + crt3plus + "+" + crt3minus
            ans = ans + "\\\\" + "\(v)^{3} - \(v) = 1"
            return ans
        case .gauss:
            let v = MathConstantType.latex[type.rawValue]
            var ans = v + "= \\frac{2}{\\pi}\\int_{0}^{1} \\frac{dx}{\\sqrt{1-x^{4}}}"
            ans = ans + "\\\\ \(v) = \\frac{\\Gamma(\\frac{1}{4})^{2}}{2\\sqrt{2\\pi^{3}}}"
            return ans
        case .ramanujan:
            let v = MathConstantType.latex[type.rawValue]
            var ans = "\(v) = \\frac{1}{\\sqrt{2}} \\prod_{p \\equiv 3 mod 4 } (1-\\frac{1}{p^{2}})^{-\\frac{1}{2}}, p \\in \\mathbb{P} \\\\"
            ans = ans + "\(v) = \\frac{\\pi}{4} \\prod_{p \\equiv 1 mod 4 } (1-\\frac{1}{p^{2}})^{\\frac{1}{2}}, p \\in \\mathbb{P} \\\\"
            ans = ans + "\(v) = \\lim\\limits_{x \\rightarrow \\infty}{\\frac{B(x)}{x}} \\sqrt{ln(x)}, \\\\"
            ans = ans + "B(x) = \\mid \\{ n \\leq x : n = a^2+b^2 \\} \\mid"
            return ans
        case .feigenbaumdelta:
            let v1 = "\\delta"
            var ans = "f_{\\mu}(x) = 1 - \\mu \\mid x \\mid^{2}, \\\\"
            ans = ans + "X_{\\mu} = \\{ x_{i+1} = f_{\\mu}(x_{i}), x_0 = 0 \\}, \\\\"
            ans = ans + "LP_{\\mu} = \\{ x : x \\text{ is limitpoint of} X_{\\mu}\\}, \\\\"
            ans = ans + "\\mu_{i} = min( \\mu : \\mid LP_{\\mu}  \\mid = 2^{i}  ) \\\\"
            ans = ans + "\(v1) = \\lim\\limits_{j \\rightarrow \\infty} \\frac{\\mu_{j} - \\mu_{j-1}}{\\mu_{j+1} - \\mu_{j}} \\\\"
            return ans
        case .feigenbaumalpha:
            let v1 = "\\delta"
            let v2 = "\\alpha"
            var ans = "f_{\\mu}(x) = 1 - \\mu \\mid x \\mid^{2}, \\\\"
            ans = ans + "X_{\\mu} = \\{ x_{i+1} = f_{\\mu}(x_{i}), x_0 = 0 \\}, \\\\"
            ans = ans + "LP_{\\mu} = \\{ x : x \\text{ is limitpoint of} X_{\\mu}\\}, \\\\"
            ans = ans + "\\mu_{i} = min( \\mu : \\mid LP_{\\mu}  \\mid = 2^{i}  ) \\\\"
            //            ans = ans + "\(v1) = \\lim\\limits_{j \\rightarrow \\infty} \\frac{\\mu_{j} - \\mu_{j-1}}{\\mu_{j+1} - \\mu_{j}} \\\\"
            ans = ans + "\(v2) = \\lim\\limits_{j \\rightarrow \\infty} \\frac{d_{j}}{d_{j+1}},  d_{j} = min LP_{\\mu_{j}} \\\\ "
            return ans
        
        case .gelfond:
            var ans = "e^{\\pi} = (-1)^{-i} \\\\"
            ans = ans + "e^{\\pi} - \\pi = 19.9990999..."
            return ans
        case .viswanath:
            //http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.498.8842&rep=rep1&type=pdf
            let v = MathConstantType.latex[type.rawValue]
            var ans = "t_{n} = \\pm t_{n-1} \\pm t_{n-2}, t_{0} = t_{1} = 1 \\\\"
            ans = ans + "\(v) = \\lim\\limits_{n \\rightarrow \\infty} \\sqrt[n]{\\mid t_{n} \\mid } \\\\ "
            return ans
        case .carefree:
            let v = MathConstantType.latex[type.rawValue]
            var ans = "C_{1}(x) = \\mid \\{ (a,b) \\le x : gcd(a,b) = 1, a \\text{ is squarefree} \\} \\mid"
            ans = ans + "\\\\ C_{1}(x) = K_{1}x^{2} + O(x ln x)"
            return ans
        }
    }
    
    internal func getLatex(n: BigUInt, type: MathConstantType) -> String {
        let latexname = type.Latex()
        let pot = type.withPot()
        let digits = CheckConstDigits(n: n, type: type)
        
        var latex = String(n)
        latex = latex + "\\cdot{10^{-" + String(digits-1-pot) + "}} \\approx "
        latex = latex + latexname + "=" + String(type.asDouble()) + "..."
        
        let morelatex = moreLatex(type: type)
        
        if !morelatex.isEmpty {
            latex = latex + "\\\\" + morelatex
        }
        return latex
        
    }
    
    public func getRationalLatex(n: BigUInt, type: MathConstantType) -> String? {
        guard let (num,denom,index) = FindRational(n: n, type: type) else { return nil }
        var latex = ""
        let latexname = type.Latex()
        //            if type == .champernowne {
        //                print("Debug")
        //            }
        guard let (_,_,oeiscf) = type.OEISRational() else { return nil }
        if !latex.isEmpty { latex = latex + "\\\\" }
        latex = latex + latexname + " \\approx " + "\\frac{"
        latex = latex + String(num) + "}{" + String(denom) + "} ="
        guard let seq = OEIS.shared.GetSequence(key: oeiscf) else { return nil }
        for i in 0...index {
            if i == 0 {
                latex = latex + String(seq[0]) + " + "
            } else if i < index {
                latex = latex + "\\frac{1}{" + String(seq[i]) + "+\\text{ }}"
            } else if i == index {
                latex = latex + "\\frac{1}{" + String(seq[i]) + "}"
            }
        }
        
        let frac = ContinuedFractions.shared.ValueRationalDigits(numerator: num, denominator: denom)
        latex = latex + " \\approx " + frac
        
        let morelatex = moreLatex(type: type)
        
        return latex + morelatex
        
        
    }
    public func getLatex(n: BigUInt) -> String? {
        var latex = ""
        var morelatex = ""
        let special = isSpecial(n: n, cancel: nil) ?? false
        if !special { return nil }
        
        if let (type,digits) = FindConst(n: n)
        {
            let latexname = type.Latex()
            let pot = type.withPot()
            
            latex = String(n)
            latex = latex + "\\cdot{10^{-" + String(digits-1-pot) + "}} \\approx "
            latex = latex + latexname + "=" + String(type.asDouble()) + "..."
            
            morelatex = morelatex + moreLatex(type: type)
        }
        
        if !morelatex.isEmpty {
            latex = latex + "\\\\" + morelatex
        }
        return latex
    }
    
    public func property() -> String {
        return "Math Constant"
    }
}

public enum NumberType : Int {
    case Integer = 0
    case Rational
    case Constructible
    case Algebraic
    case Transcendent
    case Normal
    case SuspectedNormal
    case Notcomputable
}

public protocol NumberTypeProt {
    func ConstantType() -> Set<NumberType>
}

public  class SpecialConstantTester : MathConstantTester  {
    
    public var type : MathConstantType!
    public init(_ type: MathConstantType) {
        self.type = type
    }
    
    override public func isSpecial(n: BigUInt, cancel: CalcCancelProt?) -> Bool? {
        let digits = CheckConstDigits(n: n, type: self.type)
        if digits <= 2 { return false }
        return true
    }
    
    override public func property() -> String {
        return MathConstantType.name[type.rawValue]
    }
    
    override public func getLatex(n: BigUInt) -> String? {
        return super.getLatex(n: n, type: self.type)
    }
    
}

public class RationalApproxTester : MathConstantTester  {
    
    public var type : MathConstantType!
    public init(_ type: MathConstantType) {
        self.type = type
    }
    
    override public func isSpecial(n: BigUInt, cancel: CalcCancelProt?) -> Bool? {
        if let (_,_,_) = super.FindRational(n: n, type: self.type) {
            return true
        }
        return false
    }
    
    override public func property() -> String {
        let texttype = MathConstantType.name[type.rawValue]
        return "rational " + texttype + " approx"
    }
    
    override public func getLatex(n: BigUInt) -> String? {
        return super.getRationalLatex(n: n, type: self.type)
    }
    
}
    

//public class PiTester : SpecialConstantTester , NumberTypeProt {
//
//    public init() {
//        super.init(.pi)
//    }
//
//    public func ConstantType() -> Set<NumberType> {
//        return [.Transcendent,.SuspectedNormal]
//    }
//
//
//}
//
//public class Sqrt2Tester : SpecialConstantTester, NumberTypeProt {
//    public init() {
//        super.init(.root2)
//    }
//
//    public func ConstantType() -> Set<NumberType> {
//        return [.Algebraic,.Constructible,.SuspectedNormal]
//    }
//}
//
//public class eTester : SpecialConstantTester, NumberTypeProt {
//    public init() {
//        super.init(.e)
//    }
//
//    public func ConstantType() -> Set<NumberType> {
//        return [.Transcendent,.Constructible]
//    }
//}
//
//case pi = 0
//case e
//case gamma
//case mill
//case bruns
//case root2
//case ln2
//case pisquare
//case phi
//case crt2
//case zeta3
//case conwaylambda
//case khinchin
//case silver
//case plastic
//case gauss
//case chaitin
//case copelanderdos
//case champernowne
//case ramanujan
//case feigenbaumdelta
//case feigenbaumalpha
//case gelfond
//case viswanath
//case carefree
//
//
